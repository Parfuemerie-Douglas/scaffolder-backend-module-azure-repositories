{"version":3,"file":"index.cjs.js","sources":["../src/actions/helpers.ts","../src/actions/run/cloneAzureRepo.ts","../src/actions/util.ts","../src/actions/run/pushAzureRepo.ts","../src/actions/run/pullRequestAzureRepo.ts","../src/module.ts"],"sourcesContent":["/*\n * Copyright 2022 Parfümerie Douglas GmbH\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { Git } from \"@backstage/backend-common\";\nimport { Logger } from \"winston\";\nimport * as azdev from \"azure-devops-node-api\";\nimport * as GitApi from \"azure-devops-node-api/GitApi\";\nimport * as GitInterfaces from \"azure-devops-node-api/interfaces/GitInterfaces\";\nimport { AzureDevOpsCredentialsProvider } from \"@backstage/integration\";\nimport { InputError } from \"@backstage/errors\";\n\nexport async function cloneRepo({\n  dir,\n  auth,\n  logger,\n  remote = \"origin\",\n  remoteUrl,\n  branch = \"main\",\n}: {\n  dir: string;\n  auth: { username: string; password: string } | { token: string };\n  logger: Logger;\n  remote?: string;\n  remoteUrl: string;\n  branch?: string;\n}): Promise<void> {\n  const git = Git.fromAuth({\n    ...auth,\n    logger,\n  });\n\n  await git.clone({\n    url: remoteUrl,\n    dir,\n    ref: branch,\n    noCheckout: false,\n    depth: 1,\n  });\n\n  await git.addRemote({\n    dir,\n    remote,\n    url: remoteUrl,\n  });\n}\n\nexport async function commitAndPushBranch({\n  dir,\n  credentialsProvider,\n  logger,\n  remote = 'origin',\n  commitMessage,\n  gitAuthorInfo,\n  branch = 'scaffolder',\n}: {\n  dir: string;\n  credentialsProvider: AzureDevOpsCredentialsProvider;\n  logger: Logger;\n  remote?: string;\n  commitMessage: string;\n  gitAuthorInfo?: { name?: string; email?: string };\n  branch?: string;\n}): Promise<void> {\n  const authorInfo = {\n    name: gitAuthorInfo?.name ?? \"Scaffolder\",\n    email: gitAuthorInfo?.email ?? \"scaffolder@backstage.io\",\n  };\n\n  const git = Git.fromAuth({\n    onAuth: async url => {\n      const credentials = await credentialsProvider.getCredentials({ url });\n\n      logger.info(`Using ${credentials?.type} credentials for ${url}`);\n\n      if (credentials?.type === 'pat') {\n        return { username: \"not-empty\", password: credentials.token };\n      } else if (credentials?.type === 'bearer') {\n        return {\n          headers: {\n            Authorization: `Bearer ${credentials.token}`,\n          },\n        };\n      }\n\n      throw new InputError(`No token credentials provided for ${url}`);\n    },\n    logger,\n  });\n\n  const currentBranch = await git.currentBranch({ dir });\n\n  logger.info(`Current branch is ${currentBranch}`);\n  logger.info(`Target branch is ${branch}`);\n\n  if (currentBranch !== branch) {\n    try {\n      await git.branch({\n        dir,\n        ref: branch,\n      });\n    } catch (err: unknown) {\n      if (err instanceof Error && err.name === \"AlreadyExistsError\") {\n        // we safely ignore this error\n      } else {\n        throw err;\n      }\n    }\n\n    await git.checkout({\n      dir,\n      ref: branch,\n    });\n  }\n\n  await git.add({\n    dir,\n    filepath: \".\",\n  });\n\n  await git.commit({\n    dir,\n    message: commitMessage,\n    author: authorInfo,\n    committer: authorInfo,\n  });\n\n  await git.push({\n    dir,\n    remote: remote,\n    remoteRef: `refs/heads/${branch}`,\n  });\n}\n\nexport async function createADOPullRequest({\n  gitPullRequestToCreate,\n  server,\n  auth,\n  repoId,\n  project,\n  supportsIterations,\n}:{\n  gitPullRequestToCreate: GitInterfaces.GitPullRequest;\n  server: string;\n  auth: { org: string; token: string };\n  repoId: string;\n  project?: string;\n  supportsIterations?: boolean;\n}): Promise<GitInterfaces.GitPullRequest> {\n  const url = `https://${server}/`;\n  const orgUrl = url + auth.org;\n  const token: string = auth.token || \"\"; // process.env.AZURE_TOKEN || \"\";\n\n  const authHandler = azdev.getHandlerFromToken(token);\n  const connection = new azdev.WebApi(orgUrl, authHandler);\n\n  const gitApiObject: GitApi.IGitApi = await connection.getGitApi();\n\n  const pr = await gitApiObject.createPullRequest( gitPullRequestToCreate, repoId, project, supportsIterations );\n  return pr;\n}\n\nexport async function updateADOPullRequest({\n  gitPullRequestToUpdate,\n  server,\n  auth,\n  repoId,\n  project,\n  pullRequestId,\n}:{\n  gitPullRequestToUpdate: GitInterfaces.GitPullRequest;\n  server: string;\n  auth: { org: string; token: string };\n  repoId: string;\n  project?: string;\n  pullRequestId: number;\n}): Promise<void> {\n  const url = `https://${server}/`;\n  const orgUrl = url + auth.org;\n  const token: string = auth.token || \"\"; // process.env.AZURE_TOKEN || \"\";\n\n  const authHandler = azdev.getHandlerFromToken(token);\n  const connection = new azdev.WebApi(orgUrl, authHandler);\n\n  const gitApiObject: GitApi.IGitApi = await connection.getGitApi();\n\n  await gitApiObject.updatePullRequest(gitPullRequestToUpdate, repoId, pullRequestId, project);\n}\n","/*\n * Copyright 2022 Parfümerie Douglas GmbH\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { resolveSafeChildPath } from \"@backstage/backend-plugin-api\";\nimport { InputError } from \"@backstage/errors\";\nimport {\n  DefaultAzureDevOpsCredentialsProvider,\n  ScmIntegrationRegistry,\n} from \"@backstage/integration\";\nimport { createTemplateAction } from \"@backstage/plugin-scaffolder-node\";\n\nimport { cloneRepo } from \"../helpers\";\n\nexport const cloneAzureRepoAction = (options: {\n  integrations: ScmIntegrationRegistry;\n}) => {\n  const { integrations } = options;\n\n  return createTemplateAction<{\n    remoteUrl: string;\n    branch?: string;\n    targetPath?: string;\n    server: string;\n    token?: string;\n  }>({\n    id: \"azure:repo:clone\",\n    description: \"Clone an Azure repository into the workspace directory.\",\n    schema: {\n      input: {\n        required: [\"remoteUrl\"],\n        type: \"object\",\n        properties: {\n          remoteUrl: {\n            title: \"Remote URL\",\n            type: \"string\",\n            description: \"The Git URL to the repository.\",\n          },\n          branch: {\n            title: \"Repository Branch\",\n            type: \"string\",\n            description: \"The branch to checkout to.\",\n          },\n          targetPath: {\n            title: \"Working Subdirectory\",\n            type: \"string\",\n            description:\n              \"The subdirectory of the working directory to clone the repository into.\",\n          },\n          server: {\n            type: \"string\",\n            title: \"Server hostname\",\n            description:\n              \"The hostname of the Azure DevOps service. Defaults to dev.azure.com\",\n          },\n          token: {\n            title: \"Authenticatino Token\",\n            type: \"string\",\n            description: \"The token to use for authorization.\",\n          },\n        },\n      },\n    },\n    async handler(ctx) {\n      const { remoteUrl, branch } = ctx.input;\n\n      const targetPath = ctx.input.targetPath ?? \"./\";\n      const outputDir = resolveSafeChildPath(ctx.workspacePath, targetPath);\n\n      const provider =\n        DefaultAzureDevOpsCredentialsProvider.fromIntegrations(integrations);\n      const credentials = await provider.getCredentials({ url: remoteUrl });\n\n      let auth: { username: string; password: string } | { token: string };\n      if (ctx.input.token) {\n        auth = { username: \"not-empty\", password: ctx.input.token };\n      } else if (credentials?.type === \"pat\") {\n        auth = { username: \"not-empty\", password: credentials.token };\n      } else if (credentials?.type === \"bearer\") {\n        auth = { token: credentials.token };\n      } else {\n        throw new InputError(\n          `No token credentials provided for Azure repository ${remoteUrl}`\n        );\n      }\n\n      await cloneRepo({\n        dir: outputDir,\n        auth: auth,\n        logger: ctx.logger,\n        remoteUrl: remoteUrl,\n        branch: branch,\n      });\n    },\n  });\n};\n","/*\n * Copyright 2022 Parfümerie Douglas GmbH\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { isChildPath } from \"@backstage/cli-common\";\n\nimport { join as joinPath, normalize as normalizePath } from \"path\";\n\nexport const getRepoSourceDirectory = (\n  workspacePath: string,\n  sourcePath: string | undefined\n) => {\n  if (sourcePath) {\n    const safeSuffix = normalizePath(sourcePath).replace(\n      /^(\\.\\.(\\/|\\\\|$))+/,\n      \"\"\n    );\n    const path = joinPath(workspacePath, safeSuffix);\n    if (!isChildPath(workspacePath, path)) {\n      throw new Error(\"Invalid source path\");\n    }\n    return path;\n  }\n  return workspacePath;\n};\n","/*\n * Copyright 2022 Parfümerie Douglas GmbH\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Config } from \"@backstage/config\";\nimport {\n  DefaultAzureDevOpsCredentialsProvider,\n  ScmIntegrationRegistry,\n} from \"@backstage/integration\";\nimport { createTemplateAction } from \"@backstage/plugin-scaffolder-node\";\n\nimport { commitAndPushBranch } from \"../helpers\";\nimport { getRepoSourceDirectory } from \"../util\";\n\nexport const pushAzureRepoAction = (options: {\n  integrations: ScmIntegrationRegistry;\n  config: Config;\n}) => {\n  const { integrations, config } = options;\n\n  return createTemplateAction<{\n    branch?: string;\n    sourcePath?: string;\n    gitCommitMessage?: string;\n    gitAuthorName?: string;\n    gitAuthorEmail?: string;\n    server: string;\n    token?: string;\n  }>({\n    id: \"azure:repo:push\",\n    description:\n      \"Push the content in the workspace to a remote Azure repository.\",\n    schema: {\n      input: {\n        required: [],\n        type: \"object\",\n        properties: {\n          branch: {\n            title: \"Repository Branch\",\n            type: \"string\",\n            description: \"The branch to checkout to.\",\n          },\n          sourcePath: {\n            type: \"string\",\n            title: \"Working Subdirectory\",\n            description:\n              \"The subdirectory of the working directory containing the repository.\",\n          },\n          gitCommitMessage: {\n            title: \"Git Commit Message\",\n            type: \"string\",\n            description:\n              \"Sets the commit message on the repository. The default value is 'Initial commit'\",\n          },\n          gitAuthorName: {\n            title: \"Default Author Name\",\n            type: \"string\",\n            description:\n              \"Sets the default author name for the commit. The default value is 'Scaffolder'.\",\n          },\n          gitAuthorEmail: {\n            title: \"Default Author Email\",\n            type: \"string\",\n            description: \"Sets the default author email for the commit.\",\n          },\n        },\n      },\n    },\n    async handler(ctx) {\n      const { branch, gitCommitMessage, gitAuthorName, gitAuthorEmail } =\n        ctx.input;\n\n      const sourcePath = getRepoSourceDirectory(\n        ctx.workspacePath,\n        ctx.input.sourcePath\n      );\n\n      const gitAuthorInfo = {\n        name: gitAuthorName\n          ? gitAuthorName\n          : config.getOptionalString(\"scaffolder.defaultAuthor.name\"),\n        email: gitAuthorEmail\n          ? gitAuthorEmail\n          : config.getOptionalString(\"scaffolder.defaultAuthor.email\"),\n      };\n\n      await commitAndPushBranch({\n        dir: sourcePath,\n        credentialsProvider:\n          DefaultAzureDevOpsCredentialsProvider.fromIntegrations(integrations),\n        logger: ctx.logger,\n        commitMessage: gitCommitMessage\n          ? gitCommitMessage\n          : config.getOptionalString(\"scaffolder.defaultCommitMessage\") ||\n            \"Initial commit\",\n        gitAuthorInfo,\n        branch,\n      });\n    },\n  });\n};\n","import {\n  DefaultAzureDevOpsCredentialsProvider,\n  ScmIntegrationRegistry,\n} from \"@backstage/integration\";\nimport { createTemplateAction } from \"@backstage/plugin-scaffolder-node\";\nimport { InputError } from \"@backstage/errors\";\nimport { createADOPullRequest, updateADOPullRequest } from \"../helpers\";\nimport * as GitInterfaces from \"azure-devops-node-api/interfaces/GitInterfaces\";\n\n/**\n * Creates an `ado:repo:pr` Scaffolder action.\n *\n * @remarks\n *\n * This Scaffolder action will create a PR to a repository in Azure DevOps.\n *\n * @public\n */\nexport const pullRequestAzureRepoAction = (options: {\n  integrations: ScmIntegrationRegistry;\n}) => {\n  const { integrations } = options;\n\n  return createTemplateAction<{\n    organization?: string;\n    sourceBranch?: string;\n    targetBranch?: string;\n    title: string;\n    description?: string;\n    repoId: string;\n    project?: string;\n    supportsIterations?: boolean;\n    server: string;\n    token?: string;\n    autoComplete?: boolean;\n  }>({\n    id: \"azure:repo:pr\",\n    description: \"Create a PR to a repository in Azure DevOps.\",\n    schema: {\n      input: {\n        type: \"object\",\n        required: [\"repoId\", \"title\"],\n        properties: {\n          organization: {\n            title: \"Organization Name\",\n            type: \"string\",\n            description: \"The name of the organization in Azure DevOps.\",\n          },\n          sourceBranch: {\n            title: \"Source Branch\",\n            type: \"string\",\n            description: \"The branch to merge into the source.\",\n          },\n          targetBranch: {\n            title: \"Target Branch\",\n            type: \"string\",\n            description: \"The branch to merge into (default: main).\",\n          },\n          title: {\n            title: \"Title\",\n            description: \"The title of the pull request.\",\n            type: \"string\",\n          },\n          description: {\n            title: \"Description\",\n            description: \"The description of the pull request.\",\n            type: \"string\",\n          },\n          repoId: {\n            title: \"Remote Repo ID\",\n            description: \"Repo ID of the pull request.\",\n            type: \"string\",\n          },\n          project: {\n            title: \"ADO Project\",\n            description: \"The Project in Azure DevOps.\",\n            type: \"string\",\n          },\n          supportsIterations: {\n            title: \"Supports Iterations\",\n            description: \"Whether or not the PR supports iterations.\",\n            type: \"boolean\",\n          },\n          server: {\n            type: \"string\",\n            title: \"Server hostname\",\n            description:\n              \"The hostname of the Azure DevOps service. Defaults to dev.azure.com\",\n          },\n          token: {\n            title: \"Authentication Token\",\n            type: \"string\",\n            description: \"The token to use for authorization.\",\n          },\n          autoComplete: {\n            title: \"Enable auto-completion\",\n            description:\n              \"Enable auto-completion of the pull request once policies are met\",\n            type: \"boolean\",\n          },\n        },\n      },\n      output: {\n        type: \"number\",\n        properties: {\n          pullRequestId: {\n            title: \"The ID of the created pull request\",\n            type: \"number\",\n          },\n        },\n      },\n    },\n    async handler(ctx) {\n      const { title, repoId, server, project, supportsIterations } = ctx.input;\n\n      const sourceBranch =\n        `refs/heads/${ctx.input.sourceBranch}` ?? `refs/heads/scaffolder`;\n      const targetBranch =\n        `refs/heads/${ctx.input.targetBranch}` ?? `refs/heads/main`;\n\n      const host = server ?? \"dev.azure.com\";\n      const provider =\n        DefaultAzureDevOpsCredentialsProvider.fromIntegrations(integrations);\n      const url = `https://${host}/${ctx.input.organization}`;\n      const credentials = await provider.getCredentials({ url: url });\n\n      const org = ctx.input.organization ?? \"not-empty\";\n      const token = ctx.input.token ?? credentials?.token;\n\n      const description = ctx.input.description ?? \"\";\n      const autoComplete = ctx.input.autoComplete ?? false;\n\n      if (!token) {\n        throw new InputError(`No token credentials provided for ${url}`);\n      }\n\n      const pullRequest: GitInterfaces.GitPullRequest = {\n        sourceRefName: sourceBranch,\n        targetRefName: targetBranch,\n        title: title,\n        description: description,\n      } as GitInterfaces.GitPullRequest;\n\n      const pullRequestResponse = await createADOPullRequest({\n        gitPullRequestToCreate: pullRequest,\n        server: host,\n        auth: {\n          org: org,\n          token: token,\n        },\n        repoId: repoId,\n        project: project,\n        supportsIterations: supportsIterations,\n      });\n\n      // this can't be set at creation time, so we have to update the PR to set it\n      if (autoComplete) {\n        const updateProperties = {\n          autoCompleteSetBy: { id: pullRequestResponse.createdBy?.id },\n          // the idea here is that if you want to fire-and-forget the PR by setting autocomplete, you don't also want\n          // the branch to stick around afterwards.\n          completionOptions: {\n            deleteSourceBranch: true,\n          } as GitInterfaces.GitPullRequestCompletionOptions,\n        } as GitInterfaces.GitPullRequest;\n\n        await updateADOPullRequest({\n          gitPullRequestToUpdate: updateProperties,\n          server: host,\n          auth: {\n            org: org,\n            token: token,\n          },\n          repoId: repoId,\n          project: project,\n          pullRequestId: pullRequestResponse.pullRequestId!,\n        });\n      }\n\n      ctx.output(\"pullRequestId\", pullRequestResponse.pullRequestId);\n    },\n  });\n};\n","import { scaffolderActionsExtensionPoint } from '@backstage/plugin-scaffolder-node/alpha';\nimport {\n  createBackendModule,\n  coreServices,\n} from '@backstage/backend-plugin-api';\nimport { ScmIntegrations } from '@backstage/integration';\n\nimport {\n  cloneAzureRepoAction,\n  pushAzureRepoAction,\n  pullRequestAzureRepoAction,\n} from \"./actions\";\n\nexport const scaffolderModuleAzureRepositories = createBackendModule({\n  pluginId: 'scaffolder',\n  moduleId: 'azure-repos',\n  register(env) {\n    env.registerInit({\n      deps: {\n        scaffolder: scaffolderActionsExtensionPoint,\n        config: coreServices.rootConfig,\n      },\n      async init({ scaffolder, config }) {\n        const integrations = ScmIntegrations.fromConfig(config);\n\n        scaffolder.addActions(cloneAzureRepoAction({ integrations }), pushAzureRepoAction({ integrations, config }), pullRequestAzureRepoAction({ integrations }));\n      },\n    });\n  },\n});"],"names":["Git","InputError","azdev","createTemplateAction","resolveSafeChildPath","DefaultAzureDevOpsCredentialsProvider","normalizePath","path","joinPath","isChildPath","createBackendModule","scaffolderActionsExtensionPoint","coreServices","ScmIntegrations"],"mappings":"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"}